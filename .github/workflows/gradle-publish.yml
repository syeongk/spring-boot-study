# 워크플로우 이름
name: Deploy to EC2

# 워크플로우 실행 조건
on:
  # main 브랜치에 코드가 push될 때 실행
  push:
    branches:
      - main

# 여러 개의 Job을 정의
jobs:
  # 첫 번째 Job : 프로젝트를 빌드하는 단계
  build:
    # Job이 실행될 환경 (VM 최신 Ubuntu 버전)
    runs-on: ubuntu-latest

    # Job 내에서 실행할 단계(Step) 목록
    steps:
    # Step 1: 저장소의 최신 코드 가져오기
    - name: Checkout Repository
      # GitHub Actions의 기본 checkout 액션 사용
      uses: actions/checkout@v4

    # Step 2: Java 17 환경 설정
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'corretto'

    # Step 3: application.yml 생성
    - name: Create application.yml
      # src/main/resources 폴더가 없으면 생성
      # GitHub Secrets에서 가져온 설정을 파일로 저장
      run: |
        mkdir -p src/main/resources
        echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application.yml
      # Bash 환경에서 실행
      shell: bash

    # Step 4: Gradle 실행 권한 부여
    - name: Grant execute permission for Gradle
      # gradlew 실행 권한 설정 (Linux에서 필수)
      run: chmod +x gradlew

    # Step 5: Gradle을 사용하여 프로젝트 빌드
    - name: Build with Gradle
      # 기존 빌드 파일 정리(clean), 빌드 수행, 테스트는 제외 (-x test)
      run: ./gradlew clean build -x test

    # Step 6: 빌드된 JAR 파일과 deployment 폴더를 하나의 패키지로 묶기
    - name: Package JAR and Deployment Files into ZIP
      run: |
        mkdir -p package
        cp build/libs/*.jar package/
        cp -R deployment/* package/
        cd package
        zip -r ../deployment-package.zip ./*

    # Step 7: ZIP 파일을 아티팩트로 업로드
    - name: Upload Deployment Package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deployment-package.zip

  # 두 번째 Job: zip 파일 S3 로 업로드하는 단계
  deploy:
    # "deploy" Job은 "build" Job이 완료된 후 실행됨
    needs: build
    # 실행 환경으로 최신 Ubuntu 사용
    runs-on: ubuntu-latest

    steps:
      # Step 1: build Job에서 업로드한 아티팩트 다운로드
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-package

      # Step 2: AWS CLI를 사용하기 위한 AWS 자격 증명 설정
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      # Step 3: S3로 ZIP 파일 업로드
      - name: Upload ZIP to S3
        run: aws s3 cp deployment-package s3://${{ secrets.S3_BUCKET_NAME }}/deploy/deployment-package

      # Step 4: CodeDeploy를 이용해 S3에 있는 JAR 파일을 EC2에 배포
      - name: Deploy to EC2 using CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name ${{ secrets.CODEDEPLOY_APP_NAME }} \
            --deployment-group-name ${{ secrets.CODEDEPLOY_GROUP_NAME }} \
            --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},key=deploy/deployment-package.zip,bundleType=zip