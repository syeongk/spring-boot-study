# 워크플로우 이름
name: Deploy to EC2

# 워크플로우 실행 조건
on:
  # main 브랜치에 코드가 push될 때 실행
  push:
    branches:
      - main

# 여러 개의 Job을 정의
jobs:
  # 첫 번째 Job : 프로젝트를 빌드하는 단계
  build:
    # Job이 실행될 환경 (VM 최신 Ubuntu 버전)
    runs-on: ubuntu-latest

    # Job 내에서 실행할 단계(Step) 목록
    steps:
    # Step 1: 저장소의 최신 코드 가져오기
    - name: Checkout Repository
      # GitHub Actions의 기본 checkout 액션 사용
      uses: actions/checkout@v4

    # Step 2: Java 17 환경 설정
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'corretto'

    # Step 3: application.yml 생성
    - name: Create application.yml
      # src/main/resources 폴더가 없으면 생성
      # GitHub Secrets에서 가져온 설정을 파일로 저장
      run: |
        mkdir -p src/main/resources
        echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application.yml
      # Bash 환경에서 실행
      shell: bash

    # Step 4: Gradle 실행 권한 부여
    - name: Grant execute permission for Gradle
      # gradlew 실행 권한 설정 (Linux에서 필수)
      run: chmod +x gradlew

    # Step 5: Gradle을 사용하여 프로젝트 빌드
    - name: Build with Gradle
      # 기존 빌드 파일 정리(clean), 빌드 수행, 테스트는 제외 (-x test)
      run: ./gradlew clean build -x test

    # Step 6: 빌드된 JAR 파일을 업로드
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: spring-boot-study.jar  # 업로드할 파일의 이름
        path: build/libs/*.jar  # JAR 파일이 있는 경로 지정
        
  # 두 번째 Job: EC2 서버로 배포하는 단계
  deploy:
    # "deploy" Job은 "build" Job이 완료된 후 실행됨
    needs: build
    # 실행 환경으로 최신 Ubuntu 사용
    runs-on: ubuntu-latest

    steps:
    # Step 1: 이전 Job에서 빌드한 JAR 파일 다운로드
    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: spring-boot-study.jar  # 다운로드할 파일의 이름 (업로드된 이름과 동일해야 함)
        path: build/libs  # 다운로드할 위치 지정

    # Step 2: EC2 서버로 JAR 파일 전송
    - name: Deploy to EC2
      run: |
        scp -i ${{ secrets.EC2_SSH_KEY }} build/libs/*.jar ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu
        # scp 명령어를 사용하여 JAR 파일을 EC2 서버의 /home/ubuntu 경로로 전송
        # -i ${{ secrets.EC2_SSH_KEY }} : GitHub Secrets에서 가져온 SSH Private Key 사용
        # ubuntu@${{ secrets.EC2_HOST }} : GitHub Secrets에서 가져온 EC2 인스턴스의 IP 주소

    # Step 3: EC2에서 기존 애플리케이션 중지 후 새 JAR 실행
    - name: Restart Application on EC2
      run: |
          # GitHub Actions에서 EC2 서버에 SSH로 접속
          ssh -i ${{ secrets.EC2_SSH_KEY }} ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          # 실행 중인 Java 프로세스를 종료 (실패해도 무시)
          pkill -f 'java -jar' || true
          # 안정적인 종료를 위해 3초 대기
          sleep 3

          # nohup: SSH 종료 후에도 애플리케이션이 실행되도록 함
          # java -jar /home/ubuntu/spring-boot-study.jar: 새로운 JAR 파일 실행
          # > /home/ubuntu/app.log 2>&1 &: 실행 로그를 app.log에 저장하며 백그라운드에서 실행
          nohup java -jar /home/ubuntu/spring-boot-study.jar > /home/ubuntu/app.log 2>&1 &  
          EOF
